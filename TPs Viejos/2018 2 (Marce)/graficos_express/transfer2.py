# coding=utf-8
import sympy as sp
from utils import algebra
from scipy import signal
from decimal import *

r1 = [2.28e3, 1.39e3]
k = [0.16, 0.165]
c = [680e-12, 1e-9]
av = [0.033, 0.033]
r2 = [20.5e3, 12.6e3]


getcontext().prec = 28

R1 = Decimal(r1[0])
K = Decimal(k[0])
C = Decimal(c[0])
a = Decimal(av[0])
R2 = Decimal(r2[0])

R11 = Decimal(r1[1])
K1 = Decimal(k[1])
C1 = Decimal(c[1])
A1 = Decimal(av[1])
R21 = Decimal(r2[1])


coef = [[4*A1*C**3*C1**3*K*K1*R1**2*R11**2*R2**2*R21**2*a - 4*A1*C**3*C1**3*K*R1**2*R11**2*R2**2*R21**2*a - 4*A1*C**3*C1**3*K1*R1**2*R11**2*R2**2*R21**2*a + 4*A1*C**3*C1**3*R1**2*R11**2*R2**2*R21**2*a, 0, 0], [4*C**4*C1**4*K**2*K1**2*R1**3*R11**3*R2**2*R21**2 - 8*C**4*C1**4*K**2*K1*R1**3*R11**3*R2**2*R21**2 + 4*C**4*C1**4*K**2*R1**3*R11**3*R2**2*R21**2 - 8*C**4*C1**4*K*K1**2*R1**3*R11**3*R2**2*R21**2 + 16*C**4*C1**4*K*K1*R1**3*R11**3*R2**2*R21**2 - 8*C**4*C1**4*K*R1**3*R11**3*R2**2*R21**2 + 4*C**4*C1**4*K1**2*R1**3*R11**3*R2**2*R21**2 - 8*C**4*C1**4*K1*R1**3*R11**3*R2**2*R21**2 + 4*C**4*C1**4*R1**3*R11**3*R2**2*R21**2, 8*C**4*C1**3*K**2*K1**2*R1**3*R11**3*R2**2*R21 + 4*C**4*C1**3*K**2*K1**2*R1**3*R11**2*R2**2*R21**2 - 16*C**4*C1**3*K**2*K1*R1**3*R11**3*R2**2*R21 - 4*C**4*C1**3*K**2*K1*R1**3*R11**2*R2**2*R21**2 + 8*C**4*C1**3*K**2*R1**3*R11**3*R2**2*R21 - 16*C**4*C1**3*K*K1**2*R1**3*R11**3*R2**2*R21 - 8*C**4*C1**3*K*K1**2*R1**3*R11**2*R2**2*R21**2 + 32*C**4*C1**3*K*K1*R1**3*R11**3*R2**2*R21 + 8*C**4*C1**3*K*K1*R1**3*R11**2*R2**2*R21**2 - 16*C**4*C1**3*K*R1**3*R11**3*R2**2*R21 + 8*C**4*C1**3*K1**2*R1**3*R11**3*R2**2*R21 + 4*C**4*C1**3*K1**2*R1**3*R11**2*R2**2*R21**2 - 16*C**4*C1**3*K1*R1**3*R11**3*R2**2*R21 - 4*C**4*C1**3*K1*R1**3*R11**2*R2**2*R21**2 + 8*C**4*C1**3*R1**3*R11**3*R2**2*R21 + 8*C**3*C1**4*K**2*K1**2*R1**3*R11**3*R2*R21**2 + 4*C**3*C1**4*K**2*K1**2*R1**2*R11**3*R2**2*R21**2 - 16*C**3*C1**4*K**2*K1*R1**3*R11**3*R2*R21**2 - 8*C**3*C1**4*K**2*K1*R1**2*R11**3*R2**2*R21**2 + 8*C**3*C1**4*K**2*R1**3*R11**3*R2*R21**2 + 4*C**3*C1**4*K**2*R1**2*R11**3*R2**2*R21**2 - 16*C**3*C1**4*K*K1**2*R1**3*R11**3*R2*R21**2 - 4*C**3*C1**4*K*K1**2*R1**2*R11**3*R2**2*R21**2 + 32*C**3*C1**4*K*K1*R1**3*R11**3*R2*R21**2 + 8*C**3*C1**4*K*K1*R1**2*R11**3*R2**2*R21**2 - 16*C**3*C1**4*K*R1**3*R11**3*R2*R21**2 - 4*C**3*C1**4*K*R1**2*R11**3*R2**2*R21**2 + 8*C**3*C1**4*K1**2*R1**3*R11**3*R2*R21**2 - 16*C**3*C1**4*K1*R1**3*R11**3*R2*R21**2 + 8*C**3*C1**4*R1**3*R11**3*R2*R21**2, 4*C**4*C1**2*K**2*K1**2*R1**3*R11**2*R2**2*R21 - 8*C**4*C1**2*K**2*K1*R1**3*R11**2*R2**2*R21 + 4*C**4*C1**2*K**2*R1**3*R11**2*R2**2*R21 - 8*C**4*C1**2*K*K1**2*R1**3*R11**2*R2**2*R21 + 16*C**4*C1**2*K*K1*R1**3*R11**2*R2**2*R21 - 8*C**4*C1**2*K*R1**3*R11**2*R2**2*R21 + 4*C**4*C1**2*K1**2*R1**3*R11**2*R2**2*R21 - 8*C**4*C1**2*K1*R1**3*R11**2*R2**2*R21 + 4*C**4*C1**2*R1**3*R11**2*R2**2*R21 + 16*C**3*C1**3*K**2*K1**2*R1**3*R11**3*R2*R21 + 8*C**3*C1**3*K**2*K1**2*R1**3*R11**2*R2*R21**2 + 8*C**3*C1**3*K**2*K1**2*R1**2*R11**3*R2**2*R21 + 4*C**3*C1**3*K**2*K1**2*R1**2*R11**2*R2**2*R21**2 - 32*C**3*C1**3*K**2*K1*R1**3*R11**3*R2*R21 - 8*C**3*C1**3*K**2*K1*R1**3*R11**2*R2*R21**2 - 16*C**3*C1**3*K**2*K1*R1**2*R11**3*R2**2*R21 - 4*C**3*C1**3*K**2*K1*R1**2*R11**2*R2**2*R21**2 + 16*C**3*C1**3*K**2*R1**3*R11**3*R2*R21 + 8*C**3*C1**3*K**2*R1**2*R11**3*R2**2*R21 - 32*C**3*C1**3*K*K1**2*R1**3*R11**3*R2*R21 - 16*C**3*C1**3*K*K1**2*R1**3*R11**2*R2*R21**2 - 8*C**3*C1**3*K*K1**2*R1**2*R11**3*R2**2*R21 - 4*C**3*C1**3*K*K1**2*R1**2*R11**2*R2**2*R21**2 + 64*C**3*C1**3*K*K1*R1**3*R11**3*R2*R21 + 16*C**3*C1**3*K*K1*R1**3*R11**2*R2*R21**2 + 16*C**3*C1**3*K*K1*R1**2*R11**3*R2**2*R21 + 4*C**3*C1**3*K*K1*R1**2*R11**2*R2**2*R21**2 - 32*C**3*C1**3*K*R1**3*R11**3*R2*R21 - 8*C**3*C1**3*K*R1**2*R11**3*R2**2*R21 + 16*C**3*C1**3*K1**2*R1**3*R11**3*R2*R21 + 8*C**3*C1**3*K1**2*R1**3*R11**2*R2*R21**2 - 32*C**3*C1**3*K1*R1**3*R11**3*R2*R21 - 8*C**3*C1**3*K1*R1**3*R11**2*R2*R21**2 + 16*C**3*C1**3*R1**3*R11**3*R2*R21 + 4*C**2*C1**4*K**2*K1**2*R1**2*R11**3*R2*R21**2 - 8*C**2*C1**4*K**2*K1*R1**2*R11**3*R2*R21**2 + 4*C**2*C1**4*K**2*R1**2*R11**3*R2*R21**2 - 8*C**2*C1**4*K*K1**2*R1**2*R11**3*R2*R21**2 + 16*C**2*C1**4*K*K1*R1**2*R11**3*R2*R21**2 - 8*C**2*C1**4*K*R1**2*R11**3*R2*R21**2 + 4*C**2*C1**4*K1**2*R1**2*R11**3*R2*R21**2 - 8*C**2*C1**4*K1*R1**2*R11**3*R2*R21**2 + 4*C**2*C1**4*R1**2*R11**3*R2*R21**2, 8*C**3*C1**2*K**2*K1**2*R1**3*R11**2*R2*R21 + 4*C**3*C1**2*K**2*K1**2*R1**2*R11**2*R2**2*R21 - 16*C**3*C1**2*K**2*K1*R1**3*R11**2*R2*R21 - 8*C**3*C1**2*K**2*K1*R1**2*R11**2*R2**2*R21 + 8*C**3*C1**2*K**2*R1**3*R11**2*R2*R21 + 4*C**3*C1**2*K**2*R1**2*R11**2*R2**2*R21 - 16*C**3*C1**2*K*K1**2*R1**3*R11**2*R2*R21 - 4*C**3*C1**2*K*K1**2*R1**2*R11**2*R2**2*R21 + 32*C**3*C1**2*K*K1*R1**3*R11**2*R2*R21 + 8*C**3*C1**2*K*K1*R1**2*R11**2*R2**2*R21 - 16*C**3*C1**2*K*R1**3*R11**2*R2*R21 - 4*C**3*C1**2*K*R1**2*R11**2*R2**2*R21 + 8*C**3*C1**2*K1**2*R1**3*R11**2*R2*R21 - 16*C**3*C1**2*K1*R1**3*R11**2*R2*R21 + 8*C**3*C1**2*R1**3*R11**2*R2*R21 + 8*C**2*C1**3*K**2*K1**2*R1**2*R11**3*R2*R21 + 4*C**2*C1**3*K**2*K1**2*R1**2*R11**2*R2*R21**2 - 16*C**2*C1**3*K**2*K1*R1**2*R11**3*R2*R21 - 4*C**2*C1**3*K**2*K1*R1**2*R11**2*R2*R21**2 + 8*C**2*C1**3*K**2*R1**2*R11**3*R2*R21 - 16*C**2*C1**3*K*K1**2*R1**2*R11**3*R2*R21 - 8*C**2*C1**3*K*K1**2*R1**2*R11**2*R2*R21**2 + 32*C**2*C1**3*K*K1*R1**2*R11**3*R2*R21 + 8*C**2*C1**3*K*K1*R1**2*R11**2*R2*R21**2 - 16*C**2*C1**3*K*R1**2*R11**3*R2*R21 + 8*C**2*C1**3*K1**2*R1**2*R11**3*R2*R21 + 4*C**2*C1**3*K1**2*R1**2*R11**2*R2*R21**2 - 16*C**2*C1**3*K1*R1**2*R11**3*R2*R21 - 4*C**2*C1**3*K1*R1**2*R11**2*R2*R21**2 + 8*C**2*C1**3*R1**2*R11**3*R2*R21, 4*C**2*C1**2*K**2*K1**2*R1**2*R11**2*R2*R21 - 8*C**2*C1**2*K**2*K1*R1**2*R11**2*R2*R21 + 4*C**2*C1**2*K**2*R1**2*R11**2*R2*R21 - 8*C**2*C1**2*K*K1**2*R1**2*R11**2*R2*R21 + 16*C**2*C1**2*K*K1*R1**2*R11**2*R2*R21 - 8*C**2*C1**2*K*R1**2*R11**2*R2*R21 + 4*C**2*C1**2*K1**2*R1**2*R11**2*R2*R21 - 8*C**2*C1**2*K1*R1**2*R11**2*R2*R21 + 4*C**2*C1**2*R1**2*R11**2*R2*R21]]

for i in range(len(coef[0])):
    coef[0][i] = float(coef[0][i])
for i in range(len(coef[1])):
    coef[1][i] = float(coef[1][i])

print(coef[0], coef[1])

tf = signal.lti(coef[0], coef[1])